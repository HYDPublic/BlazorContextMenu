@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>Right-click on the rows to show the context menu.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ContextMenuTrigger MenuId="tableContextMenu">
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    </ContextMenuTrigger>

    <ContextMenu Id="tableContextMenu">
        <Item ClickAsync="@ReloadClick"><i class="fas fa-sync-alt blue-icon"></i> Reload</Item>
        <Item Click="@DeleteClick"><i class="fas fa-trash-alt red-icon"></i> Delete</Item>
    </ContextMenu>
}

@functions {
    List<WeatherForecast> forecasts;

    protected override async Task OnInitAsync()
    {
        await LoadForecasts();
    }

    private async Task LoadForecasts()
    {
        forecasts = (await Http.GetJsonAsync<WeatherForecast[]>("/api/SampleData/WeatherForecasts")).ToList();
    }

    class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF { get; set; }
        public string Summary { get; set; }
    }

    async Task ReloadClick(MenuItemClickEventArgs e)
    {
        await LoadForecasts();
        StateHasChanged();
    }

    void DeleteClick(MenuItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = RegisteredFunction.Invoke<int>("DemoApp.FetchData.GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentItem = forecasts.ElementAt(itemIndex);
            forecasts.Remove(currentItem);
            StateHasChanged();
        }
    }
}
